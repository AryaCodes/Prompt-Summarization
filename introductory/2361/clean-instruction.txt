You are given an array $a$ of length $n$ consisting of zeros. You perform $n$ actions with this array: Initialize a heap, $h$, with the value, $(-n, 0, n-1)$. Then during the $i$-th action: First, pop a value, $p$, from the heap $h$. Second, set $l = p1$ and $r = p2$. Next, find the midpoint $mid = \floor{\frac{l+r}{2}}$. Then, set $amid = i + 1$. Finally, if $mid - l > 0$ push the value $(-mid+l, l, mid-1)$ onto the heap $h$ and if $r - mid > 0$ push the value $(-r+mid, mid+1, r)$ onto the heap $h$. Input: The first line of the input contains one integer $t$ ($1 \le t \le 10^4$) — the number of test cases. Then $t$ test cases follow. The only line of the test case contains one integer $n$ ($1 \le n \le 2 \cdot 10^5$) — the length of $a$. It is guaranteed that the sum of $n$ over all test cases does not exceed $2 \cdot 10^5$ ($\sum n \le 2 \cdot 10^5$). Output: For each test case, print the answer — the array $a$ of length $n$ after performing $n$ actions described in the problem statement. -----Example----- Input 6 1 2 3 4 5 6 Output 1 1 2 2 1 3 3 1 2 4 2 4 1 3 5 3 4 1 5 2 6